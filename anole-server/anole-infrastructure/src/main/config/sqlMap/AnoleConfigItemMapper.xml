<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.anole.infrastructure.dao.AnoleConfigItemMapper" >
  <resultMap id="BaseResultMap" type="org.anole.infrastructure.model.AnoleConfigItem" >
    <id column="Id" property="id" jdbcType="INTEGER" />
    <result column="Key" property="key" jdbcType="VARCHAR" />
    <result column="Type" property="type" jdbcType="TINYINT" />
    <result column="Creator" property="creator" jdbcType="VARCHAR" />
    <result column="EnvName" property="envName" jdbcType="VARCHAR" />
    <result column="LastOperator" property="lastOperator" jdbcType="VARCHAR" />
    <result column="Project" property="project" jdbcType="VARCHAR" />
    <result column="CreateTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UpdateTime" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="Status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="org.anole.infrastructure.model.AnoleConfigItemWithBLOBs" extends="BaseResultMap" >
    <result column="Value" property="value" jdbcType="LONGVARCHAR" />
    <result column="Description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    Id, Key, Type, Creator, EnvName, LastOperator, Project, CreateTime, UpdateTime, Status
  </sql>
  <sql id="Blob_Column_List" >
    Value, Description
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from anole_config_item
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from anole_config_item
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.anole.infrastructure.model.AnoleConfigItemWithBLOBs" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into anole_config_item (Key, Type, Creator, 
      EnvName, LastOperator, Project, 
      CreateTime, UpdateTime, Status, 
      Value, Description)
    values (#{key,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, #{Creator,jdbcType=VARCHAR}, 
      #{envName,jdbcType=VARCHAR}, #{lastOperator,jdbcType=VARCHAR}, #{project,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{status,jdbcType=TINYINT}, 
      #{value,jdbcType=LONGVARCHAR}, #{description,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.anole.infrastructure.model.AnoleConfigItemWithBLOBs" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into anole_config_item
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="key != null" >
        Key,
      </if>
      <if test="type != null" >
        Type,
      </if>
      <if test="creator != null" >
        Creator,
      </if>
      <if test="envName != null" >
        EnvName,
      </if>
      <if test="lastOperator != null" >
        LastOperator,
      </if>
      <if test="project != null" >
        Project,
      </if>
      <if test="createTime != null" >
        CreateTime,
      </if>
      <if test="updateTime != null" >
        UpdateTime,
      </if>
      <if test="status != null" >
        Status,
      </if>
      <if test="value != null" >
        Value,
      </if>
      <if test="description != null" >
        Description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="key != null" >
        #{key,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="envName != null" >
        #{envName,jdbcType=VARCHAR},
      </if>
      <if test="lastOperator != null" >
        #{lastOperator,jdbcType=VARCHAR},
      </if>
      <if test="project != null" >
        #{project,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="value != null" >
        #{value,jdbcType=LONGVARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.anole.infrastructure.model.AnoleConfigItemWithBLOBs" >
    update anole_config_item
    <set >
      <if test="key != null" >
        Key = #{key,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        Type = #{type,jdbcType=TINYINT},
      </if>
      <if test="creator != null" >
        Creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="envName != null" >
        EnvName = #{envName,jdbcType=VARCHAR},
      </if>
      <if test="lastOperator != null" >
        LastOperator = #{lastOperator,jdbcType=VARCHAR},
      </if>
      <if test="project != null" >
        Project = #{project,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CreateTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        Status = #{status,jdbcType=TINYINT},
      </if>
      <if test="value != null" >
        Value = #{value,jdbcType=LONGVARCHAR},
      </if>
      <if test="description != null" >
        Description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.anole.infrastructure.model.AnoleConfigItemWithBLOBs" >
    update anole_config_item
    set Key = #{key,jdbcType=VARCHAR},
      Type = #{type,jdbcType=TINYINT},
      Creator = #{creator,jdbcType=VARCHAR},
      EnvName = #{envName,jdbcType=VARCHAR},
      LastOperator = #{lastOperator,jdbcType=VARCHAR},
      Project = #{project,jdbcType=VARCHAR},
      CreateTime = #{createTime,jdbcType=TIMESTAMP},
      UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      Status = #{status,jdbcType=TINYINT},
      Value = #{value,jdbcType=LONGVARCHAR},
      Description = #{description,jdbcType=LONGVARCHAR}
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.anole.infrastructure.model.AnoleConfigItem" >
    update anole_config_item
    set Key = #{key,jdbcType=VARCHAR},
      Type = #{type,jdbcType=TINYINT},
      Creator = #{creator,jdbcType=VARCHAR},
      EnvName = #{envName,jdbcType=VARCHAR},
      LastOperator = #{lastOperator,jdbcType=VARCHAR},
      Project = #{project,jdbcType=VARCHAR},
      CreateTime = #{createTime,jdbcType=TIMESTAMP},
      UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      Status = #{status,jdbcType=TINYINT}
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <!-- Custom methods -->
  <select id="selectByKeyAndEnv" resultMap="ResultMapWithBLOBs" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from anole_config_item
    where Key = #{key,jdbcType=VARCHAR}
    AND EnvName = #{env,jdbcType=VARCHAR}
    AND Status = 1
  </select>
  <select id="selectByKeyAndEnvWithoutStatus" resultMap="ResultMapWithBLOBs" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from anole_config_item
    where Key = #{key,jdbcType=VARCHAR}
    AND EnvName = #{env,jdbcType=VARCHAR} 
  </select> 
  <update id="resetConfigItem" parameterType="org.anole.infrastructure.model.AnoleConfigItemWithBLOBs" >
    update anole_config_item
    <set >
      <if test="type != null" >
        Type = #{type,jdbcType=TINYINT},
      </if>
      <if test="creator != null" >
        Creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="lastOperator != null" >
        LastOperator = #{lastOperator,jdbcType=VARCHAR},
      </if>
      <if test="project != null" >
        Project = #{project,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CreateTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        Status = #{status,jdbcType=TINYINT},
      </if>
      <if test="value != null" >
        Value = #{value,jdbcType=LONGVARCHAR},
      </if>
      <if test="description != null" >
        Description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where Key = #{key,jdbcType=VARCHAR} 
    AND EnvName = #{envName,jdbcType=VARCHAR}
  </update>
</mapper>